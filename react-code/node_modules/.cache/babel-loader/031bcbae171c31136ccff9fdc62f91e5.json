{"ast":null,"code":"import _slicedToArray from\"/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{debounce}from'lodash';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SIZES={over:'work-img--oversize',max:'work-img--maxsize',card:'work-img--cardsize'};var imgbox=null;function WorkImageBox(_ref){var src=_ref.src,size=_ref.size;var imgSize=SIZES[size];var blanksize={};if(window.innerWidth<=960){blanksize={height:window.innerWidth*9/16+50};}else if(window.innerWidth>960){blanksize={height:window.innerWidth*9/16+170};}var _useState=useState(blanksize),_useState2=_slicedToArray(_useState,2),blank=_useState2[0],setBlank=_useState2[1];//실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n//너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n//resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n//가장 마지막에 실행된 동일한 함수만을 적용한다.\nvar resizeBlankbox=debounce(function(){console.log(blanksize.marginBottom);if(window.innerWidth<=960){blanksize={height:window.innerWidth*9/16+50};setBlank(blanksize);}else if(window.innerWidth>960){blanksize={height:window.innerWidth*9/16+170};setBlank(blanksize);}},500);useEffect(function(){window.addEventListener('resize',resizeBlankbox);return function(){window.removeEventListener('resize',resizeBlankbox);};},[]);if(size==='over'){imgbox=/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{className:imgSize,src:src,alt:\"Work\"}),/*#__PURE__*/_jsx(\"div\",{className:\"blank\",style:blank})]});}else if(size==='max'||'card'){imgbox=/*#__PURE__*/_jsx(\"img\",{className:imgSize,src:src,alt:\"Work\"});}else{imgbox=null;}return/*#__PURE__*/_jsx(_Fragment,{children:imgbox});}export default WorkImageBox;","map":{"version":3,"sources":["/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js"],"names":["React","useEffect","useState","debounce","SIZES","over","max","card","imgbox","WorkImageBox","src","size","imgSize","blanksize","window","innerWidth","height","blank","setBlank","resizeBlankbox","console","log","marginBottom","addEventListener","removeEventListener"],"mappings":"mJAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,OAASC,QAAT,KAAyB,QAAzB,C,6IAEA,GAAMC,CAAAA,KAAK,CAAG,CACVC,IAAI,CAAE,oBADI,CAEVC,GAAG,CAAE,mBAFK,CAGVC,IAAI,CAAE,oBAHI,CAAd,CAMA,GAAIC,CAAAA,MAAM,CAAG,IAAb,CAEA,QAASC,CAAAA,YAAT,MAAmC,IAAZC,CAAAA,GAAY,MAAZA,GAAY,CAAPC,IAAO,MAAPA,IAAO,CAC/B,GAAMC,CAAAA,OAAO,CAAGR,KAAK,CAACO,IAAD,CAArB,CACA,GAAIE,CAAAA,SAAS,CAAG,EAAhB,CAEA,GAAGC,MAAM,CAACC,UAAP,EAAqB,GAAxB,CAA4B,CACxBF,SAAS,CAAG,CACRG,MAAM,CAAIF,MAAM,CAACC,UAAP,CAAkB,CAAnB,CAAsB,EAAtB,CAA2B,EAD5B,CAAZ,CAIH,CALD,IAKO,IAAID,MAAM,CAACC,UAAP,CAAoB,GAAxB,CAA4B,CAC/BF,SAAS,CAAG,CACRG,MAAM,CAAIF,MAAM,CAACC,UAAP,CAAkB,CAAnB,CAAsB,EAAtB,CAA2B,GAD5B,CAAZ,CAGH,CAED,cAA0Bb,QAAQ,CAACW,SAAD,CAAlC,wCAAOI,KAAP,eAAcC,QAAd,eAEA;AACA;AACA;AACA;AACA,GAAMC,CAAAA,cAAc,CAAGhB,QAAQ,CAAC,UAAM,CAClCiB,OAAO,CAACC,GAAR,CAAYR,SAAS,CAACS,YAAtB,EACA,GAAGR,MAAM,CAACC,UAAP,EAAqB,GAAxB,CAA4B,CACxBF,SAAS,CAAG,CACRG,MAAM,CAAIF,MAAM,CAACC,UAAP,CAAkB,CAAnB,CAAsB,EAAtB,CAAyB,EAD1B,CAAZ,CAGAG,QAAQ,CAACL,SAAD,CAAR,CACH,CALD,IAKO,IAAIC,MAAM,CAACC,UAAP,CAAoB,GAAxB,CAA4B,CAC/BF,SAAS,CAAG,CACRG,MAAM,CAAIF,MAAM,CAACC,UAAP,CAAkB,CAAnB,CAAsB,EAAtB,CAAyB,GAD1B,CAAZ,CAGAG,QAAQ,CAACL,SAAD,CAAR,CACH,CACJ,CAb8B,CAa5B,GAb4B,CAA/B,CAeAZ,SAAS,CAAC,UAAK,CACXa,MAAM,CAACS,gBAAP,CAAwB,QAAxB,CAAkCJ,cAAlC,EACA,MAAM,WAAM,CACRL,MAAM,CAACU,mBAAP,CAA2B,QAA3B,CAAqCL,cAArC,EACH,CAFD,CAGH,CALQ,CAKN,EALM,CAAT,CAQA,GAAGR,IAAI,GAAG,MAAV,CAAiB,CACbH,MAAM,cACN,wCACA,YAAK,SAAS,CAAEI,OAAhB,CAAyB,GAAG,CAAEF,GAA9B,CAAmC,GAAG,CAAC,MAAvC,EADA,cAEA,YAAK,SAAS,CAAC,OAAf,CAAuB,KAAK,CAAEO,KAA9B,EAFA,GADA,CAMH,CAPD,IAOO,IAAGN,IAAI,GAAG,KAAP,EAAgB,MAAnB,CAA2B,CAC9BH,MAAM,cAAG,YAAK,SAAS,CAAEI,OAAhB,CAAyB,GAAG,CAAEF,GAA9B,CAAmC,GAAG,CAAC,MAAvC,EAAT,CACH,CAFM,IAEA,CACHF,MAAM,CAAG,IAAT,CACH,CACD,mBACI,yBACCA,MADD,EADJ,CAKH,CAED,cAAeC,CAAAA,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { debounce } from 'lodash';\n\nconst SIZES = {\n    over: 'work-img--oversize',\n    max: 'work-img--maxsize',\n    card: 'work-img--cardsize'\n};\n\nvar imgbox = null;\n\nfunction WorkImageBox({src, size}) {\n    const imgSize = SIZES[size];\n    var blanksize = {};\n\n    if(window.innerWidth <= 960){\n        blanksize = {\n            height : (window.innerWidth*9)/16 + 50\n        };\n        \n    } else if (window.innerWidth > 960){\n        blanksize = {\n            height : (window.innerWidth*9)/16 + 170\n        };\n    }\n\n    const [blank, setBlank] = useState(blanksize);\n\n    //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n    //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n    //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n    //가장 마지막에 실행된 동일한 함수만을 적용한다.\n    const resizeBlankbox = debounce(() => {\n        console.log(blanksize.marginBottom);\n        if(window.innerWidth <= 960){\n            blanksize = {\n                height : (window.innerWidth*9)/16+50\n            };\n            setBlank(blanksize);\n        } else if (window.innerWidth > 960){\n            blanksize = {\n                height : (window.innerWidth*9)/16+170\n            };\n            setBlank(blanksize);\n        }\n    }, 500);\n    \n    useEffect(()=> {\n        window.addEventListener('resize', resizeBlankbox);\n        return() => {\n            window.removeEventListener('resize', resizeBlankbox);\n        }\n    }, []);\n\n\n    if(size==='over'){\n        imgbox = \n        <>\n        <img className={imgSize} src={src} alt=\"Work\"/>\n        <div className=\"blank\" style={blank}></div>\n        </>\n\n    } else if(size==='max' || 'card') {\n        imgbox = <img className={imgSize} src={src} alt=\"Work\" />\n    } else {\n        imgbox = null;\n    }\n    return (\n        <>\n        {imgbox}\n        </>\n    )\n}\n\nexport default WorkImageBox;\n"]},"metadata":{},"sourceType":"module"}