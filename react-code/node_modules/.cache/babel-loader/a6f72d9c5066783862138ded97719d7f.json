{"ast":null,"code":"var _jsxFileName = \"/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { debounce } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SIZES = {\n  over: 'work-img--oversize',\n  max: 'work-img--maxsize',\n  card: 'work-img--cardsize'\n};\nvar imgbox = null;\n\nfunction WorkImageBox({\n  src,\n  size\n}) {\n  _s();\n\n  const imgSize = SIZES[size];\n  const workImgBox = useRef(null);\n  var blanksize = {};\n\n  if (window.innerWidth <= 960) {\n    blanksize = {\n      height: window.innerWidth * 9 / 16 + 50\n    };\n  } else if (window.innerWidth > 960) {\n    blanksize = {\n      height: window.innerWidth * 9 / 16 + 170\n    };\n  }\n\n  const [blank, setBlank] = useState(blanksize); //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n  //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n  //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n  //가장 마지막에 실행된 동일한 함수만을 적용한다.\n\n  const resizeBlankbox = debounce(() => {\n    console.log(blanksize.marginBottom);\n\n    if (window.innerWidth <= 960) {\n      blanksize = {\n        height: window.innerWidth * 9 / 16 + 50\n      };\n      setBlank(blanksize);\n    } else if (window.innerWidth > 960) {\n      blanksize = {\n        height: window.innerWidth * 9 / 16 + 170\n      };\n      setBlank(blanksize);\n    }\n  }, 500);\n  useEffect(() => {\n    window.addEventListener('resize', resizeBlankbox);\n    return () => {\n      window.removeEventListener('resize', resizeBlankbox);\n    };\n  }, []);\n\n  if (size === 'over') {\n    imgbox = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: imgSize,\n        src: src,\n        alt: \"Work Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blank\",\n        style: blank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else if (size === 'max' || 'card') {\n    imgbox = /*#__PURE__*/_jsxDEV(\"img\", {\n      className: imgSize,\n      src: src,\n      alt: \"Work Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 18\n    }, this);\n  } else {\n    imgbox = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: imgbox\n  }, void 0, false);\n}\n\n_s(WorkImageBox, \"SjkRQnMbnpgwpG0Ow0wriIPNWTc=\");\n\n_c = WorkImageBox;\nexport default WorkImageBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkImageBox\");","map":{"version":3,"sources":["/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js"],"names":["React","useEffect","useRef","useState","debounce","SIZES","over","max","card","imgbox","WorkImageBox","src","size","imgSize","workImgBox","blanksize","window","innerWidth","height","blank","setBlank","resizeBlankbox","console","log","marginBottom","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport { debounce } from 'lodash';\n\nconst SIZES = {\n    over: 'work-img--oversize',\n    max: 'work-img--maxsize',\n    card: 'work-img--cardsize'\n};\n\nvar imgbox = null;\n\nfunction WorkImageBox({src, size}) {\n    const imgSize = SIZES[size];\n    const workImgBox = useRef(null);\n    var blanksize = {};\n\n    if(window.innerWidth <= 960){\n        blanksize = {\n            height : (window.innerWidth*9)/16 + 50\n        };\n        \n    } else if (window.innerWidth > 960){\n        blanksize = {\n            height : (window.innerWidth*9)/16 + 170\n        };\n    }\n\n    const [blank, setBlank] = useState(blanksize);\n\n    //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n    //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n    //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n    //가장 마지막에 실행된 동일한 함수만을 적용한다.\n    const resizeBlankbox = debounce(() => {\n        console.log(blanksize.marginBottom);\n        if(window.innerWidth <= 960){\n            blanksize = {\n                height : (window.innerWidth*9)/16+50\n            };\n            setBlank(blanksize);\n        } else if (window.innerWidth > 960){\n            blanksize = {\n                height : (window.innerWidth*9)/16+170\n            };\n            setBlank(blanksize);\n        }\n    }, 500);\n    \n    useEffect(()=> {\n        window.addEventListener('resize', resizeBlankbox);\n        return() => {\n            window.removeEventListener('resize', resizeBlankbox);\n        }\n    }, []);\n\n\n    if(size==='over'){\n        imgbox = \n        <>\n        <img className={imgSize} src={src} alt=\"Work Image\"/>\n        <div className=\"blank\" style={blank}></div>\n        </>\n\n    } else if(size==='max' || 'card') {\n        imgbox = <img className={imgSize} src={src} alt=\"Work Image\" />\n    } else {\n        imgbox = null;\n    }\n    return (\n        <>\n        {imgbox}\n        </>\n    )\n}\n\nexport default WorkImageBox;\n"]},"metadata":{},"sourceType":"module"}