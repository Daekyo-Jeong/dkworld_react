{"ast":null,"code":"var _jsxFileName = \"/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js\";\nimport React, { useEffect, useState } from 'react'; // import { debounce } from 'lodash';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SIZES = {\n  over: 'work-img--oversize',\n  max: 'work-img--maxsize',\n  card: 'work-img--cardsize'\n};\nvar imgbox = null;\nvar defaultFolder = '../../images/works_images/';\n\nfunction WorkImageBox({\n  src,\n  src2,\n  size\n}) {\n  const imgSize = SIZES[size]; // var blanksize = {};\n  // if(window.innerWidth <= 960){\n  //     blanksize = {\n  //         height : (window.innerWidth*9)/16 + 50\n  //     };\n  // } else if (window.innerWidth > 960){\n  //     blanksize = {\n  //         height : (window.innerWidth*9)/16 + 170\n  //     };\n  // }\n  // const [blank, setBlank] = useState(blanksize);\n  //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n  //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n  //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n  //가장 마지막에 실행된 동일한 함수만을 적용한다.\n  // const resizeBlankbox = debounce(() => {\n  //     if(window.innerWidth <= 960){\n  //         blanksize = {\n  //             height : (window.innerWidth*9)/16+50\n  //         };\n  //         setBlank(blanksize);\n  //     } else if (window.innerWidth > 960){\n  //         blanksize = {\n  //             height : (window.innerWidth*9)/16+170\n  //         };\n  //         setBlank(blanksize);\n  //     }\n  // }, 500);\n  // useEffect(()=> {\n  //     window.addEventListener('resize', resizeBlankbox);\n  //     return() => {\n  //         window.removeEventListener('resize', resizeBlankbox);\n  //     }\n  // }, []);\n\n  if (size === \"over\" || \"max\") {\n    imgbox = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: imgSize + \"--wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: imgSize,\n          src: defaultFolder + src,\n          alt: \"Work\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  } else if (size === \"card\") {\n    imgbox = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: imgSize + \"--wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: imgSize,\n        src: defaultFolder + src,\n        alt: \"Work\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: imgSize,\n        src: defaultFolder + src2,\n        alt: \"Work\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this);\n  } else {\n    imgbox = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: imgbox\n  }, void 0, false);\n}\n\n_c = WorkImageBox;\nexport default WorkImageBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkImageBox\");","map":{"version":3,"sources":["/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js"],"names":["React","useEffect","useState","SIZES","over","max","card","imgbox","defaultFolder","WorkImageBox","src","src2","size","imgSize"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;;;;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE,oBADI;AAEVC,EAAAA,GAAG,EAAE,mBAFK;AAGVC,EAAAA,IAAI,EAAE;AAHI,CAAd;AAMA,IAAIC,MAAM,GAAG,IAAb;AACA,IAAIC,aAAa,GAAG,4BAApB;;AAEA,SAASC,YAAT,CAAsB;AAACC,EAAAA,GAAD;AAAMC,EAAAA,IAAN;AAAYC,EAAAA;AAAZ,CAAtB,EAAyC;AACrC,QAAMC,OAAO,GAAGV,KAAK,CAACS,IAAD,CAArB,CADqC,CAErC;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAGA,IAAI,KAAG,MAAP,IAAiB,KAApB,EAA0B;AACtBL,IAAAA,MAAM,gBACN;AAAA,6BACI;AAAK,QAAA,SAAS,EAAEM,OAAO,GAAC,QAAxB;AAAA,+BACA;AAAK,UAAA,SAAS,EAAEA,OAAhB;AAAyB,UAAA,GAAG,EAAEL,aAAa,GAACE,GAA5C;AAAiD,UAAA,GAAG,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ,qBADA;AAOH,GARD,MAQO,IAAGE,IAAI,KAAG,MAAV,EAAkB;AACjBL,IAAAA,MAAM,gBACF;AAAK,MAAA,SAAS,EAAEM,OAAO,GAAC,QAAxB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAEA,OAAhB;AAAyB,QAAA,GAAG,EAAEL,aAAa,GAACE,GAA5C;AAAiD,QAAA,GAAG,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAEG,OAAhB;AAAyB,QAAA,GAAG,EAAEL,aAAa,GAACG,IAA5C;AAAkD,QAAA,GAAG,EAAC;AAAtD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAKP,GANM,MAMA;AACHJ,IAAAA,MAAM,GAAG,IAAT;AACH;;AACD,sBACI;AAAA,cACCA;AADD,mBADJ;AAKH;;KAjEQE,Y;AAmET,eAAeA,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\n// import { debounce } from 'lodash';\n\nconst SIZES = {\n    over: 'work-img--oversize',\n    max: 'work-img--maxsize',\n    card: 'work-img--cardsize'\n};\n\nvar imgbox = null;\nvar defaultFolder = '../../images/works_images/';\n\nfunction WorkImageBox({src, src2, size}) {\n    const imgSize = SIZES[size];\n    // var blanksize = {};\n\n    // if(window.innerWidth <= 960){\n    //     blanksize = {\n    //         height : (window.innerWidth*9)/16 + 50\n    //     };\n        \n    // } else if (window.innerWidth > 960){\n    //     blanksize = {\n    //         height : (window.innerWidth*9)/16 + 170\n    //     };\n    // }\n\n    // const [blank, setBlank] = useState(blanksize);\n\n    //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n    //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n    //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n    //가장 마지막에 실행된 동일한 함수만을 적용한다.\n    // const resizeBlankbox = debounce(() => {\n    //     if(window.innerWidth <= 960){\n    //         blanksize = {\n    //             height : (window.innerWidth*9)/16+50\n    //         };\n    //         setBlank(blanksize);\n    //     } else if (window.innerWidth > 960){\n    //         blanksize = {\n    //             height : (window.innerWidth*9)/16+170\n    //         };\n    //         setBlank(blanksize);\n    //     }\n    // }, 500);\n    \n    // useEffect(()=> {\n    //     window.addEventListener('resize', resizeBlankbox);\n    //     return() => {\n    //         window.removeEventListener('resize', resizeBlankbox);\n    //     }\n    // }, []);\n\n\n    if(size===\"over\" || \"max\"){\n        imgbox = \n        <>\n            <div className={imgSize+\"--wrap\"}>\n            <img className={imgSize} src={defaultFolder+src} alt=\"Work\"/>\n            </div>\n        </>\n\n    } else if(size===\"card\") {\n            imgbox =                 \n                <div className={imgSize+\"--wrap\"}>\n                    <img className={imgSize} src={defaultFolder+src} alt=\"Work\"/>\n                    <img className={imgSize} src={defaultFolder+src2} alt=\"Work\"/>\n                </div>\n    } else {\n        imgbox = null;\n    }\n    return (\n        <>\n        {imgbox}\n        </>\n    )\n}\n\nexport default WorkImageBox;\n"]},"metadata":{},"sourceType":"module"}