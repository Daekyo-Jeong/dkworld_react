{"ast":null,"code":"import React from'react';// import { debounce } from 'lodash';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var SIZES={over:'work-img--oversize',max:'work-img--maxsize',card:'work-img--cardsize'};var defaultFolder='../../images/works_images/';function WorkImageBox(_ref){var src=_ref.src,size=_ref.size;var imgSize=SIZES[size];// var blanksize = {};\n// if(window.innerWidth <= 960){\n//     blanksize = {\n//         height : (window.innerWidth*9)/16 + 50\n//     };\n// } else if (window.innerWidth > 960){\n//     blanksize = {\n//         height : (window.innerWidth*9)/16 + 170\n//     };\n// }\n// const [blank, setBlank] = useState(blanksize);\n//실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n//너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n//resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n//가장 마지막에 실행된 동일한 함수만을 적용한다.\n// const resizeBlankbox = debounce(() => {\n//     if(window.innerWidth <= 960){\n//         blanksize = {\n//             height : (window.innerWidth*9)/16+50\n//         };\n//         setBlank(blanksize);\n//     } else if (window.innerWidth > 960){\n//         blanksize = {\n//             height : (window.innerWidth*9)/16+170\n//         };\n//         setBlank(blanksize);\n//     }\n// }, 500);\n// useEffect(()=> {\n//     window.addEventListener('resize', resizeBlankbox);\n//     return() => {\n//         window.removeEventListener('resize', resizeBlankbox);\n//     }\n// }, []);\n// if(size===\"over\" || \"max\"){\n//     imgbox = \n//     <>\n//         <div className={imgSize+\"--wrap\"}>\n//         <img className={imgSize} src={defaultFolder+src} alt=\"Work\"/>\n//         </div>\n//     </>\n// } else if(size===\"card\") {\n//         imgbox =                 \n//             <div className={imgSize+\"--wrap\"}>\n//                 <img className={imgSize} src={defaultFolder+src1} alt=\"Work\"/>\n//             </div>\n// } else {\n//     imgbox = null;\n// }\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"img\",{className:imgSize,src:defaultFolder+src,alt:\"Work\"})});}export default WorkImageBox;","map":{"version":3,"sources":["/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js"],"names":["React","SIZES","over","max","card","defaultFolder","WorkImageBox","src","size","imgSize"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA;gGAEA,GAAMC,CAAAA,KAAK,CAAG,CACVC,IAAI,CAAE,oBADI,CAEVC,GAAG,CAAE,mBAFK,CAGVC,IAAI,CAAE,oBAHI,CAAd,CAMA,GAAMC,CAAAA,aAAa,CAAG,4BAAtB,CAEA,QAASC,CAAAA,YAAT,MAAmC,IAAZC,CAAAA,GAAY,MAAZA,GAAY,CAAPC,IAAO,MAAPA,IAAO,CAC/B,GAAMC,CAAAA,OAAO,CAAGR,KAAK,CAACO,IAAD,CAArB,CACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBACI,sCACA,YAAK,SAAS,CAAEC,OAAhB,CAAyB,GAAG,CAAEJ,aAAa,CAACE,GAA5C,CAAiD,GAAG,CAAC,MAArD,EADA,EADJ,CAKH,CAED,cAAeD,CAAAA,YAAf","sourcesContent":["import React from 'react'\n// import { debounce } from 'lodash';\n\nconst SIZES = {\n    over: 'work-img--oversize',\n    max: 'work-img--maxsize',\n    card: 'work-img--cardsize'\n};\n\nconst defaultFolder = '../../images/works_images/';\n\nfunction WorkImageBox({src, size}) {\n    const imgSize = SIZES[size];\n    // var blanksize = {};\n\n    // if(window.innerWidth <= 960){\n    //     blanksize = {\n    //         height : (window.innerWidth*9)/16 + 50\n    //     };\n        \n    // } else if (window.innerWidth > 960){\n    //     blanksize = {\n    //         height : (window.innerWidth*9)/16 + 170\n    //     };\n    // }\n\n    // const [blank, setBlank] = useState(blanksize);\n\n    //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n    //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n    //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n    //가장 마지막에 실행된 동일한 함수만을 적용한다.\n    // const resizeBlankbox = debounce(() => {\n    //     if(window.innerWidth <= 960){\n    //         blanksize = {\n    //             height : (window.innerWidth*9)/16+50\n    //         };\n    //         setBlank(blanksize);\n    //     } else if (window.innerWidth > 960){\n    //         blanksize = {\n    //             height : (window.innerWidth*9)/16+170\n    //         };\n    //         setBlank(blanksize);\n    //     }\n    // }, 500);\n    \n    // useEffect(()=> {\n    //     window.addEventListener('resize', resizeBlankbox);\n    //     return() => {\n    //         window.removeEventListener('resize', resizeBlankbox);\n    //     }\n    // }, []);\n\n\n    // if(size===\"over\" || \"max\"){\n    //     imgbox = \n    //     <>\n    //         <div className={imgSize+\"--wrap\"}>\n    //         <img className={imgSize} src={defaultFolder+src} alt=\"Work\"/>\n    //         </div>\n    //     </>\n\n    // } else if(size===\"card\") {\n    //         imgbox =                 \n    //             <div className={imgSize+\"--wrap\"}>\n    //                 <img className={imgSize} src={defaultFolder+src1} alt=\"Work\"/>\n    //             </div>\n    // } else {\n    //     imgbox = null;\n    // }\n    return (\n        <>\n        <img className={imgSize} src={defaultFolder+src} alt=\"Work\"/>\n        </>\n    )\n}\n\nexport default WorkImageBox;\n"]},"metadata":{},"sourceType":"module"}