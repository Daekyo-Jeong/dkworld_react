{"ast":null,"code":"var _jsxFileName = \"/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js\";\nimport React, { useEffect, useState } from 'react'; // import { debounce } from 'lodash';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SIZES = {\n  over: 'work-img--oversize',\n  max: 'work-img--maxsize',\n  card: 'work-img--cardsize'\n};\nvar imgbox = null;\n\nfunction WorkImageBox({\n  src,\n  size,\n  src1,\n  src2,\n  src3,\n  grid\n}) {\n  const imgSize = SIZES[size]; // var blanksize = {};\n  // if(window.innerWidth <= 960){\n  //     blanksize = {\n  //         height : (window.innerWidth*9)/16 + 50\n  //     };\n  // } else if (window.innerWidth > 960){\n  //     blanksize = {\n  //         height : (window.innerWidth*9)/16 + 170\n  //     };\n  // }\n  // const [blank, setBlank] = useState(blanksize);\n  //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n  //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n  //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n  //가장 마지막에 실행된 동일한 함수만을 적용한다.\n  // const resizeBlankbox = debounce(() => {\n  //     if(window.innerWidth <= 960){\n  //         blanksize = {\n  //             height : (window.innerWidth*9)/16+50\n  //         };\n  //         setBlank(blanksize);\n  //     } else if (window.innerWidth > 960){\n  //         blanksize = {\n  //             height : (window.innerWidth*9)/16+170\n  //         };\n  //         setBlank(blanksize);\n  //     }\n  // }, 500);\n  // useEffect(()=> {\n  //     window.addEventListener('resize', resizeBlankbox);\n  //     return() => {\n  //         window.removeEventListener('resize', resizeBlankbox);\n  //     }\n  // }, []);\n\n  if (size === 'over' || 'max') {\n    imgbox = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: imgSize,\n        src: \"../../images/works_images/\" + src,\n        alt: \"Work\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  } else if (size === 'card') {\n    if (grid === '2') {\n      imgbox = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"work-img--cardsize-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: imgSize,\n            src: \"../../images/works_images/\" + src1,\n            alt: \"Work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: imgSize,\n            src: \"../../images/works_images/\" + src2,\n            alt: \"Work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    } else if (grid === '3') {\n      imgbox = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"work-img--cardsize-3grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: imgSize,\n            src: \"../../images/works_images/\" + src1,\n            alt: \"Work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: imgSize,\n            src: \"../../images/works_images/\" + src2,\n            alt: \"Work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: imgSize,\n            src: \"../../images/works_images/\" + src3,\n            alt: \"Work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n  } else {\n    imgbox = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: imgbox\n  }, void 0, false);\n}\n\n_c = WorkImageBox;\nexport default WorkImageBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkImageBox\");","map":{"version":3,"sources":["/Users/dk/Desktop/works/Project/coding/dk_world_react/react-code/src/components/WorkImageBox.js"],"names":["React","useEffect","useState","SIZES","over","max","card","imgbox","WorkImageBox","src","size","src1","src2","src3","grid","imgSize"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;;;;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE,oBADI;AAEVC,EAAAA,GAAG,EAAE,mBAFK;AAGVC,EAAAA,IAAI,EAAE;AAHI,CAAd;AAMA,IAAIC,MAAM,GAAG,IAAb;;AAEA,SAASC,YAAT,CAAsB;AAACC,EAAAA,GAAD;AAAMC,EAAAA,IAAN;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,IAAlB;AAAwBC,EAAAA,IAAxB;AAA8BC,EAAAA;AAA9B,CAAtB,EAA2D;AACvD,QAAMC,OAAO,GAAGZ,KAAK,CAACO,IAAD,CAArB,CADuD,CAEvD;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAGA,IAAI,KAAG,MAAP,IAAiB,KAApB,EAA0B;AACtBH,IAAAA,MAAM,gBACN;AAAA,6BACI;AAAK,QAAA,SAAS,EAAEQ,OAAhB;AAAyB,QAAA,GAAG,EAAE,+BAA6BN,GAA3D;AAAgE,QAAA,GAAG,EAAC;AAApE;AAAA;AAAA;AAAA;AAAA;AADJ,qBADA;AAKH,GAND,MAMO,IAAGC,IAAI,KAAG,MAAV,EAAkB;AACrB,QAAGI,IAAI,KAAG,GAAV,EAAc;AACVP,MAAAA,MAAM,gBACF;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAEQ,OAAhB;AAAyB,YAAA,GAAG,EAAE,+BAA6BJ,IAA3D;AAAiE,YAAA,GAAG,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAEI,OAAhB;AAAyB,YAAA,GAAG,EAAE,+BAA6BH,IAA3D;AAAiE,YAAA,GAAG,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,uBADJ;AAOH,KARD,MAQO,IAAIE,IAAI,KAAG,GAAX,EAAe;AAClBP,MAAAA,MAAM,gBACF;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAEQ,OAAhB;AAAyB,YAAA,GAAG,EAAE,+BAA6BJ,IAA3D;AAAiE,YAAA,GAAG,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAEI,OAAhB;AAAyB,YAAA,GAAG,EAAE,+BAA6BH,IAA3D;AAAiE,YAAA,GAAG,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAK,YAAA,SAAS,EAAEG,OAAhB;AAAyB,YAAA,GAAG,EAAE,+BAA6BF,IAA3D;AAAiE,YAAA,GAAG,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,uBADJ;AAQH;AAEJ,GApBM,MAoBA;AACHN,IAAAA,MAAM,GAAG,IAAT;AACH;;AACD,sBACI;AAAA,cACCA;AADD,mBADJ;AAKH;;KA7EQC,Y;AA+ET,eAAeA,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\n// import { debounce } from 'lodash';\n\nconst SIZES = {\n    over: 'work-img--oversize',\n    max: 'work-img--maxsize',\n    card: 'work-img--cardsize'\n};\n\nvar imgbox = null;\n\nfunction WorkImageBox({src, size, src1, src2, src3, grid}) {\n    const imgSize = SIZES[size];\n    // var blanksize = {};\n\n    // if(window.innerWidth <= 960){\n    //     blanksize = {\n    //         height : (window.innerWidth*9)/16 + 50\n    //     };\n        \n    // } else if (window.innerWidth > 960){\n    //     blanksize = {\n    //         height : (window.innerWidth*9)/16 + 170\n    //     };\n    // }\n\n    // const [blank, setBlank] = useState(blanksize);\n\n    //실시간으로 화면 변경될 때 마다 사이즈 변경하는 것으로 했더니 과부화 걸림\n    //너무 잦은 반복으로 화면을 렌더링 해서 그런 듯\n    //resizeBlankbox 함수를 debounce로 감싸고, 1000ms 동안 반복되지 않도록 설정\n    //가장 마지막에 실행된 동일한 함수만을 적용한다.\n    // const resizeBlankbox = debounce(() => {\n    //     if(window.innerWidth <= 960){\n    //         blanksize = {\n    //             height : (window.innerWidth*9)/16+50\n    //         };\n    //         setBlank(blanksize);\n    //     } else if (window.innerWidth > 960){\n    //         blanksize = {\n    //             height : (window.innerWidth*9)/16+170\n    //         };\n    //         setBlank(blanksize);\n    //     }\n    // }, 500);\n    \n    // useEffect(()=> {\n    //     window.addEventListener('resize', resizeBlankbox);\n    //     return() => {\n    //         window.removeEventListener('resize', resizeBlankbox);\n    //     }\n    // }, []);\n\n\n    if(size==='over' || 'max'){\n        imgbox = \n        <>\n            <img className={imgSize} src={\"../../images/works_images/\"+src} alt=\"Work\"/>\n        </>\n\n    } else if(size==='card') {\n        if(grid==='2'){\n            imgbox = \n                <>\n                    <div className=\"work-img--cardsize-grid\">\n                        <img className={imgSize} src={\"../../images/works_images/\"+src1} alt=\"Work\" />\n                        <img className={imgSize} src={\"../../images/works_images/\"+src2} alt=\"Work\" />\n                    </div>\n                </>\n        } else if (grid==='3'){\n            imgbox = \n                <>\n                    <div className=\"work-img--cardsize-3grid\">\n                        <img className={imgSize} src={\"../../images/works_images/\"+src1} alt=\"Work\" />\n                        <img className={imgSize} src={\"../../images/works_images/\"+src2} alt=\"Work\" />\n                        <img className={imgSize} src={\"../../images/works_images/\"+src3} alt=\"Work\" />\n                    </div>\n                </>\n        }\n        \n    } else {\n        imgbox = null;\n    }\n    return (\n        <>\n        {imgbox}\n        </>\n    )\n}\n\nexport default WorkImageBox;\n"]},"metadata":{},"sourceType":"module"}